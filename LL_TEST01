/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file    i2c.c
  * @brief   This file provides code for the configuration
  *          of the I2C instances.
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "i2c.h"
#include "stdio.h"
#include "stm32g0xx.h"
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};

  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
  I2C_InitStruct.Timing = 0x00303D5B;
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
  I2C_InitStruct.DigitalFilter = 0;
  I2C_InitStruct.OwnAddress1 = 0;
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
  LL_I2C_Init(I2C1, &I2C_InitStruct);
  LL_I2C_EnableAutoEndMode(I2C1);
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
  LL_I2C_DisableOwnAddress2(I2C1);
  LL_I2C_DisableGeneralCall(I2C1);
  LL_I2C_EnableClockStretching(I2C1);
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

///* USER CODE BEGIN 1 */
//BSP_StatusTypeDef BSP_I2C_Mem_Write(I2C_TypeDef *I2Cx, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
//{
//	  uint8_t                    *pBuffPtr;      /*!< Pointer to I2C transfer buffer            */
//
//    uint16_t                   XferSize;       /*!< I2C transfer size                         */
//
//    __IO uint16_t              XferCount;      /*!< I2C transfer counter                      */
//
//    uint32_t tickstart = 0U;
//
//    if((pData == NULL) || (Size == 0U))
//    {
//      return  BSP_ERROR;
//    }
//
//    /* Init tickstart for timeout management*/
//    tickstart = BSP_GetTick();
//
//    if(I2C_WaitOnFlagUntilTimeout(I2Cx, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != BSP_OK)
//    {
//      return BSP_TIMEOUT;
//    }
//
//    /* Prepare transfer parameters */
//    pBuffPtr  = pData;
//    XferCount = Size;
//
//    /* Send Slave Address and Memory Address */
//    if(I2C_RequestMemoryWrite(I2Cx, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != BSP_OK)
//    {
//        return BSP_ERROR;
//    }
//
//    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
//    if(XferCount > MAX_NBYTE_SIZE)
//    {
//      XferSize = MAX_NBYTE_SIZE;
//      I2C_TransferConfig(I2Cx, DevAddress, XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
//    }
//    else
//    {
//      XferSize = XferCount;
//      I2C_TransferConfig(I2Cx, DevAddress, XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
//    }
//
//    do
//    {
//      /* Wait until TXIS flag is set */
//      if(I2C_WaitOnTXISFlagUntilTimeout(I2Cx, Timeout, tickstart) != BSP_OK)
//      {
//          return BSP_ERROR;
//      }
//
//      /* Write data to TXDR */
//      I2Cx->TXDR = (*pBuffPtr++);
//      XferCount--;
//      XferSize--;
//
//      if((XferSize == 0U) && (XferCount!=0U))
//      {
//        /* Wait until TCR flag is set */
//        if(I2C_WaitOnFlagUntilTimeout(I2Cx, I2C_FLAG_TCR, RESET, Timeout, tickstart) != BSP_OK)
//        {
//          return BSP_TIMEOUT;
//        }
//
//        if(XferCount > MAX_NBYTE_SIZE)
//        {
//          XferSize = MAX_NBYTE_SIZE;
//          I2C_TransferConfig(I2Cx, DevAddress, XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
//        }
//        else
//        {
//          XferSize = XferCount;
//          I2C_TransferConfig(I2Cx, DevAddress, XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
//        }
//      }
//
//    }while(XferCount > 0U);
//
//    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
//    /* Wait until STOPF flag is reset */
//    if(I2C_WaitOnSTOPFlagUntilTimeout(I2Cx, Timeout, tickstart) != BSP_OK)
//    {
//        return BSP_ERROR;
//    }
//
//    /* Clear STOP Flag */
//    __I2C_CLEAR_FLAG(I2Cx, I2C_FLAG_STOPF);
//
//    /* Clear Configuration Register 2 */
//    I2C_RESET_CR2(I2Cx);
//
//    return BSP_OK;
//}
/* USER CODE END 1 */


uint8_t i2c_read_len(I2C_TypeDef *I2Cx,  uint8_t Addr , uint8_t Reg, uint8_t len,uint8_t *buf)
{

	/* 1.保证I2C外设不在使用中. */
    while(LL_I2C_IsActiveFlag_BUSY(I2Cx));

	    /* Check if the I2C is already enabled */
    if ((I2Cx->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
    {
      /* Enable I2C peripheral */
      LL_I2C_Enable(I2Cx);
    }

    /* Disable Pos */
//    CLEAR_BIT(I2Cx->CR1, I2C_CR1_POS);
    CLEAR_BIT(I2Cx->CR1, I2C_CR1_POS);

		/* Enable Acknowledge */
//		SET_BIT(I2Cx->CR1, I2C_CR1_ACK);
		SET_BIT(I2Cx->CR1, I2C_CR1_ACK);

  /* 2.发送START信号 */
    LL_I2C_GenerateStartCondition(I2Cx);
    while(!LL_I2C_IsActiveFlag_SB(I2Cx));

  /* 2.写器件地址 */
    LL_I2C_TransmitData8(I2Cx, Addr);
		  /* Wait until ADDR flag is set */
   while(!LL_I2C_IsActiveFlag_ADDR(I2Cx)){};

    /* Clear ADDR flag */
		 LL_I2C_ClearFlag_ADDR(I2Cx);

		/* Wait until TXE flag is set */
    while(!LL_I2C_IsActiveFlag_TXE(I2Cx));

    /* 4.发送器件寄存器地址. */
    LL_I2C_TransmitData8(I2Cx, Reg);
    while(!LL_I2C_IsActiveFlag_TXE(I2Cx));

  /* 5.提供RESTART信号. */
   // LL_I2C_GenerateStopCondition(I2Cx);
    LL_I2C_GenerateStartCondition(I2Cx);
    while(!LL_I2C_IsActiveFlag_SB(I2Cx));

  /* 6.重新发送地址,并附带读标记. */
    LL_I2C_TransmitData8(I2Cx, Addr | 0x01);
		/* Wait until ADDR flag is set */
		while(!LL_I2C_IsActiveFlag_ADDR(I2Cx)){};
   //



    if (len  == 0U)
    {
      /* Clear ADDR flag */
      LL_I2C_ClearFlag_ADDR(I2Cx);

      /* Generate Stop */
      LL_I2C_GenerateStopCondition(I2Cx);
    }
    else if (len == 1U)
    {
      /* Disable Acknowledge */
      CLEAR_BIT(I2Cx->CR1, I2C_CR1_ACK);

      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      LL_I2C_ClearFlag_ADDR(I2Cx);

      /* Generate Stop */
      LL_I2C_GenerateStopCondition(I2Cx);

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (len == 2U)
    {
      /* Enable Pos */
      SET_BIT(I2Cx->CR1, I2C_CR1_POS);

      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      LL_I2C_ClearFlag_ADDR(I2Cx);

      /* Disable Acknowledge */
      CLEAR_BIT(I2Cx->CR1, I2C_CR1_ACK);

      /* Re-enable IRQs */
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(I2Cx->CR1, I2C_CR1_ACK);
      /* Clear ADDR flag */
      LL_I2C_ClearFlag_ADDR(I2Cx);
    }

    while (len > 0U)
    {
      if (len <= 3U)
      {
        /* One byte */
        if (len == 1U)
        {
          /* Wait until RXNE flag is set */
					while(!LL_I2C_IsActiveFlag_RXNE(I2Cx)){};


          /* Read data from DR */
         *buf  = (uint8_t)LL_I2C_ReceiveData8(I2Cx);

          /* Increment Buffer pointer */
          buf++;

          /* Update counter */
          len--;
        }
        /* Two bytes */
        else if (len == 2U)
        {
          /* Wait until BTF flag is set */
         		while(!LL_I2C_IsActiveFlag_BTF(I2Cx)){}

          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
           LL_I2C_GenerateStopCondition(I2Cx);


          /* Read data from DR */
           *buf  = (uint8_t)LL_I2C_ReceiveData8(I2Cx);

          /* Increment Buffer pointer */
          buf++;

          /* Update counter */
          len--;

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *buf  = (uint8_t)LL_I2C_ReceiveData8(I2Cx);

          /* Increment Buffer pointer */
          buf++;

          /* Update counter */
          len--;
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
           while(!LL_I2C_IsActiveFlag_BTF(I2Cx)){}


          /* Disable Acknowledge */
          CLEAR_BIT(I2Cx->CR1, I2C_CR1_ACK);

          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
           *buf  = (uint8_t)LL_I2C_ReceiveData8(I2Cx);

          /* Increment Buffer pointer */
            buf++;

          /* Update counter */
          len--;

          /* Wait until BTF flag is set */
					while(!LL_I2C_IsActiveFlag_BTF(I2Cx)){}

          /* Generate Stop */
           LL_I2C_GenerateStopCondition(I2Cx);

          /* Read data from DR */
            *buf  = (uint8_t)LL_I2C_ReceiveData8(I2Cx);

          /* Increment Buffer pointer */
           buf++;

          /* Update counter */
					len--;


          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
           *buf  = (uint8_t)LL_I2C_ReceiveData8(I2Cx);


          /* Increment Buffer pointer */
           buf++;

          /* Update counter */
         	len--;
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        while(!LL_I2C_IsActiveFlag_RXNE(I2Cx)){};

        /* Read data from DR */
            *buf  = (uint8_t)LL_I2C_ReceiveData8(I2Cx);

          /* Increment Buffer pointer */
           buf++;

         /* Update counter */
					len--;


        if (LL_I2C_IsActiveFlag_BTF(I2Cx))
        {
            /* Read data from DR */
            *buf  = (uint8_t)LL_I2C_ReceiveData8(I2Cx);

          /* Increment Buffer pointer */
           buf++;

         /* Update counter */
					len--;
        }
      }
    }

  return 0;
}


uint8_t i2c_write_len(I2C_TypeDef *I2Cx,  uint8_t addr , uint8_t reg, uint8_t len,uint8_t *buf)
{
    int i=0;
  /* 1.保证I2C外设不在使用中. */
    while(LL_I2C_IsActiveFlag_BUSY(I2Cx));


    /* Check if the I2C is already enabled */
    if ((I2Cx->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
    {
      /* Enable I2C peripheral */
      LL_I2C_Enable(I2Cx);
    }

    /* Disable Pos */
//    CLEAR_BIT(I2Cx->CR1, I2C_CR1_POS);
    CLEAR_BIT(I2Cx_CR1_PE, I2C_CR1_POS);


  /* 2.发送START信号 */
    LL_I2C_GenerateStartCondition(I2Cx);
    while(!LL_I2C_IsActiveFlag_SB(I2Cx));

  /* 2.写器件地址 */
    LL_I2C_TransmitData8(I2Cx, addr);
		LL_mDelay(1);
    while(!LL_I2C_IsActiveFlag_ADDR(I2Cx));

    LL_I2C_ClearFlag_ADDR(I2Cx);

  /* 3.地址位已经置位,通常TXE也会完成,为了谨慎,再查一下. */
		while(!LL_I2C_IsActiveFlag_TXE(I2Cx)){}

  /* 4.发送器件寄存器地址. */
    LL_I2C_TransmitData8(I2Cx, reg);

		i = len;
    while(i>0)
    {
			while(!LL_I2C_IsActiveFlag_TXE(I2Cx)){};
      /* 5.写入寄存器内容 */
      LL_I2C_TransmitData8(I2Cx, *buf);
      buf++;
			i--;

			if(LL_I2C_IsActiveFlag_BTF(I2Cx)==SET && i!=0)
			{
				  LL_I2C_TransmitData8(I2Cx, *buf);
					buf++;
					i--;

			}
    }

		while(!LL_I2C_IsActiveFlag_BTF(I2Cx)){}


  /* 6.传送结束条件. */
    LL_I2C_GenerateStopCondition(I2Cx);


    return 0;

}


//3
#include "stm32l4xx.h"
#include "SetupPeriph.h"
#include "stm32l4xx_ll_i2c.h"
#include "i2c_cm.h"

#include  <stdio.h>


/**
  * @brief  Wriete register in TCA9554PWR
  * @param  I2C_TypeDef *I2Cx  -- Number port I2C
              SlaveAddr_IC - Address Slave IC on bus I2C
              addr_reg - Address registr TCA9554PWR
              value - value to write to registry
  * @retval An ErrorStatus enumeration
  *          - SUCCESS:
  *          - ERROR:   Not applicable
  */

ErrorStatus I2C_write_reg_TCA9554(I2C_TypeDef *I2Cx , uint8_t SlaveAddr_IC, uint8_t addr_reg, uint8_t value){

    SlaveAddr_IC = SlaveAddr_IC<<1;

    uint32_t counter = 0;
    while(LL_I2C_IsActiveFlag_BUSY(I2Cx) == SET){
        counter++;
        if( counter == 25000 ) {//
            Error_Handler();
            return ERROR;
        }
    }

    LL_I2C_HandleTransfer(I2Cx, SlaveAddr_IC,LL_I2C_ADDRSLAVE_7BIT, 2,LL_I2C_MODE_AUTOEND,LL_I2C_GENERATE_START_WRITE ); //LL_I2C_GENERATE_START_READ
    while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET);

    LL_I2C_TransmitData8(I2Cx, addr_reg);

    counter=0;
    while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET){
        counter++;
        if( counter == 25000 ){
            LL_I2C_ClearFlag_TXE(I2Cx);
            Error_Handler();
            return ERROR;
        }
    }

    LL_I2C_TransmitData8(I2Cx, value);
    while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET);

    while(LL_I2C_IsActiveFlag_STOP(I2Cx)==RESET);

    LL_I2C_ClearFlag_STOP(I2Cx);
    return SUCCESS;
}


ErrorStatus I2C_write_reg_8bit_TMP75(I2C_TypeDef *I2Cx , uint8_t SlaveAddr_IC, uint8_t addr_reg, uint8_t value){

    SlaveAddr_IC = SlaveAddr_IC<<1;

    uint32_t counter = 0;
    while(LL_I2C_IsActiveFlag_BUSY(I2Cx)==SET){
        counter++;
        if( counter == 25000 ){//aproximate 150ms
            Error_Handler();
            return ERROR;
        }
    }

    LL_I2C_HandleTransfer(I2Cx, SlaveAddr_IC,LL_I2C_ADDRSLAVE_7BIT, 2,LL_I2C_MODE_AUTOEND,LL_I2C_GENERATE_START_WRITE ); //LL_I2C_GENERATE_START_READ
    while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET);

    LL_I2C_TransmitData8(I2Cx, addr_reg);

    counter=0;
    while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET){
        counter++;
        if( counter == 25000 ){//aproximate 150ms
            LL_I2C_ClearFlag_TXE(I2Cx);
            Error_Handler();
            return ERROR;
        }
    }

    LL_I2C_TransmitData8(I2Cx, value);
    while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET);

    while(LL_I2C_IsActiveFlag_STOP(I2Cx)==RESET);

    LL_I2C_ClearFlag_STOP(I2Cx);
    return SUCCESS;
}


ErrorStatus I2C_write_reg_16bit_TMP75(I2C_TypeDef *I2Cx , uint8_t SlaveAddr_IC, uint8_t addr_reg, uint16_t value){

    SlaveAddr_IC = SlaveAddr_IC<<1;

    uint32_t counter = 0;
    while(LL_I2C_IsActiveFlag_BUSY(I2Cx)==SET){
        counter++;
        if( counter == 25000 ){//aproximate 150ms
            Error_Handler();
            return ERROR;
        }
    }

    LL_I2C_HandleTransfer(I2Cx, SlaveAddr_IC,LL_I2C_ADDRSLAVE_7BIT, 3,LL_I2C_MODE_AUTOEND,LL_I2C_GENERATE_START_WRITE ); //LL_I2C_GENERATE_START_READ
    while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET);

    LL_I2C_TransmitData8(I2Cx, addr_reg);

    counter=0;
    while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET){
        counter++;
        if( counter == 25000){//aproximate 150ms
            LL_I2C_ClearFlag_TXE(I2Cx);
            Error_Handler();
            return ERROR;
        }
    }

    LL_I2C_TransmitData8(I2Cx, (uint8_t)(value>>8)); //byte1
    while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET);

    LL_I2C_TransmitData8(I2Cx, (uint8_t) value ); //byte2
    while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET);

    while(LL_I2C_IsActiveFlag_STOP(I2Cx)==RESET);

    LL_I2C_ClearFlag_STOP(I2Cx);
    return SUCCESS;

}

uint8_t I2C_read_reg_8bit_TMP75(I2C_TypeDef *I2Cx , uint8_t SlaveAddr_IC, uint8_t addr_reg){

    uint8_t read_data;

    SlaveAddr_IC = SlaveAddr_IC<<1;

    uint32_t counter = 0;
    while(LL_I2C_IsActiveFlag_BUSY(I2Cx)==SET){
        counter++;
        if( counter == 25000){//aproximate 150ms
            Error_Handler();
            return 0xFF;
        }
    }

    LL_I2C_HandleTransfer(I2Cx, SlaveAddr_IC,LL_I2C_ADDRSLAVE_7BIT, 1,LL_I2C_MODE_SOFTEND,LL_I2C_GENERATE_START_WRITE ); //LL_I2C_GENERATE_START_READ
    while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET);

    LL_I2C_TransmitData8(I2Cx, addr_reg);

    counter=0;
    while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET){
        counter++;
        if( counter == 25000){//aproximate 150ms
            LL_I2C_ClearFlag_TXE(I2Cx);
            Error_Handler();
            return 0xFF;
        }
    }
    while(LL_I2C_IsActiveFlag_TC(I2Cx)==RESET);

    LL_I2C_HandleTransfer(I2Cx, SlaveAddr_IC, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ); //LL_I2C_MODE_SOFTEND

    while(LL_I2C_IsActiveFlag_RXNE(I2Cx)==RESET);

    read_data = LL_I2C_ReceiveData8(I2Cx);

    while(LL_I2C_IsActiveFlag_STOP(I2Cx)==RESET);
    LL_I2C_ClearFlag_STOP(I2Cx);

    return read_data;
}

uint16_t I2C_read_reg_16bit_TMP75(I2C_TypeDef *I2Cx , uint8_t SlaveAddr_IC, uint8_t addr_reg){

    uint8_t read_data[2], i=0;

    SlaveAddr_IC = SlaveAddr_IC<<1;

    uint32_t counter = 0;
    while(LL_I2C_IsActiveFlag_BUSY(I2Cx)==SET){
        counter++;
        if( counter == 25000 ){//aproximate 150ms
            Error_Handler();
            return 0xFF;
        }
    }

    LL_I2C_HandleTransfer(I2Cx, SlaveAddr_IC,LL_I2C_ADDRSLAVE_7BIT, 1,LL_I2C_MODE_SOFTEND,LL_I2C_GENERATE_START_WRITE ); //LL_I2C_GENERATE_START_READ
    while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET);

    LL_I2C_TransmitData8(I2Cx, addr_reg);

    counter=0;
    while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET){
        counter++;
        if( counter == 25000 ){//aproximate 150ms
            LL_I2C_ClearFlag_TXE(I2Cx);
            Error_Handler();
            return 0xFF;
        }
    }
    while(LL_I2C_IsActiveFlag_TC(I2Cx)==RESET);

    LL_I2C_HandleTransfer(I2Cx, SlaveAddr_IC, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ); //LL_I2C_MODE_SOFTEND

    while(!LL_I2C_IsActiveFlag_STOP(I2Cx)){

        if(LL_I2C_IsActiveFlag_RXNE(I2Cx)){
            read_data[i] = LL_I2C_ReceiveData8(I2Cx);
            i++;
        }
    }

    LL_I2C_ClearFlag_STOP(I2Cx);

    return (read_data[0]<<8) | read_data[1];
}
